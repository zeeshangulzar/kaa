--- 
- !ruby/object:Report 
  id: 9
  report_type: Simple
  name: Completed Evaluation On
  fields: 
  - "1"
  - "143"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Completed Evaluation On
- !ruby/object:Report 
  id: 8
  report_type: Simple
  name: Gender
  fields: 
  - "7"
  - "8"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Gender
- !ruby/object:Report 
  id: 106
  report_type: Simple
  name: Total Points
  fields: 
  - "1"
  - "43"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Total Points
- !ruby/object:Report 
  id: 107
  report_type: Simple
  name: Activity Points
  fields: 
  - "1"
  - "42"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Activity Points
- !ruby/object:Report 
  id: 108
  report_type: Simple
  name: Bus Activity Points
  fields: 
  - "1"
  - "41"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Bus Activity Points
- !ruby/object:Report 
  id: 108
  report_type: Simple
  name: Quiz Points
  fields: 
  - "1"
  - "40"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Quiz Points
- !ruby/object:Report 
  id: 109
  report_type: Simple
  name: Participants
  fields: 
  - "1"
  - "19"
  - "12|1"
  - "43"
  - "40"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Participants
- !ruby/object:Report 
  id: 110
  report_type: Simple
  name: Participants (Simple)
  fields: 
  - "1"
  - "100|1"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Participants (Simple)
- !ruby/object:Report 
  id: 12
  report_type: Simple
  name: Active Participants
  fields: 
  - "2"
  - "8"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Active Participants
- !ruby/object:Report 
  id: 34
  report_type: SQL
  name: Total Participants
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select dates.reported_on `Reported On`, count(users.id) `Total Participants`
    from (select distinct(entries.recorded_on) reported_on from entries where recorded_on between :reported_on_min and :reported_on_max) dates
    left join users on (DATE(users.created_at) <= dates.reported_on)
    where :conditions
    group by dates.reported_on

  created_by_master: false
  friendly_url_key: Total Participants
- !ruby/object:Report 
  id: 51
  report_type: Simple
  name: Days Logged
  fields: 
  - "1"
  - "19"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Days Logged
- !ruby/object:Report 
  id: 52
  report_type: Simple
  name: Patches Earned
  fields: 
  - "1"
  - "49"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Patches Earned
- !ruby/object:Report 
  id: 52
  report_type: Simple
  name: Average Patches Earned
  fields: 
  - "1"
  - "48"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Average Patches Earned
- !ruby/object:Report 
  id: 53
  report_type: Simple
  name: Attractions Earned
  fields: 
  - "1"
  - "45"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Attractions Earned
- !ruby/object:Report 
  id: 54
  report_type: Simple
  name: Average Attractions Earned
  fields: 
  - "1"
  - "44"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Average Attractions Earned
- !ruby/object:Report 
  id: 55
  report_type: Simple
  name: Bus Attractions Earned
  fields: 
  - "1"
  - "41"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Bus Attractions Earned
- !ruby/object:Report 
  id: 56
  report_type: Simple
  name: Average Bus Attractions Earned
  fields: 
  - "1"
  - "46"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Average Bus Attractions Earned
- !ruby/object:Report 
  id: 57
  report_type: Simple
  name: Recorded Activities
  fields: 
  - "1"
  - "51"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Recorded Activities
- !ruby/object:Report 
  id: 58
  report_type: Simple
  name: Average Recorded Activities
  fields: 
  - "1"
  - "50"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Average Recorded Activities
- !ruby/object:Report 
  id: 59
  report_type: SQL
  name: Days Active Per Week (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.days_active_per_week,y.days_active_per_week) `Days Active Per Week`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.days_active_per_week
      from evaluations e
      where e.days_active_per_week is not null
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.days_active_per_week
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.days_active_per_week is not null
      group by evaluations.days_active_per_week
    ) y on y.days_active_per_week = x.days_active_per_week
    LEFT join
      (
        select count(evaluations.id) count, evaluations.days_active_per_week
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.days_active_per_week is not null
        group by evaluations.days_active_per_week
      ) z on z.days_active_per_week = x.days_active_per_week
    where y.days_active_per_week is not null or z.days_active_per_week is not null
    group by `Days Active Per Week`

  created_by_master: true
  friendly_url_key: Days Active Per Week (Completed Participants)
- !ruby/object:Report 
  id: 65
  report_type: SQL
  name: Stress (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.stress,y.stress) `Ability to Cope`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.stress
      from evaluations e
      where e.stress is not null
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.stress
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.stress is not null
      group by evaluations.stress
    ) y on y.stress = x.stress
    LEFT join
      (
        select count(evaluations.id) count, evaluations.stress
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.stress is not null
        group by evaluations.stress
      ) z on z.stress = x.stress
    where y.stress is not null or z.stress is not null
    group by `Ability to Cope`

  created_by_master: true
  friendly_url_key: Stress (Completed Participants)
- !ruby/object:Report 
  id: 66
  report_type: SQL
  name: Water Glasses (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.water_glasses,y.water_glasses) `Water`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.water_glasses
      from evaluations e
      where e.water_glasses is not null
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.water_glasses
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.water_glasses is not null
      group by evaluations.water_glasses
    ) y on y.water_glasses = x.water_glasses
    LEFT join
      (
        select count(evaluations.id) count, evaluations.water_glasses
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.water_glasses is not null
        group by evaluations.water_glasses
      ) z on z.water_glasses = x.water_glasses
    where y.water_glasses is not null or z.water_glasses is not null
    group by `Water`

  created_by_master: true
  friendly_url_key: Water Glasses (Completed Participants)
- !ruby/object:Report 
  id: 60
  report_type: SQL
  name: Exercise Per Day (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.exercise_per_day,y.exercise_per_day) `Exercise Per Day`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.exercise_per_day
      from evaluations e
      where e.exercise_per_day is not null and e.exercise_per_day <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.exercise_per_day
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.exercise_per_day is not null and evaluations.exercise_per_day <> ''
      group by evaluations.exercise_per_day
    ) y on y.exercise_per_day = x.exercise_per_day
    LEFT join
      (
        select count(evaluations.id) count, evaluations.exercise_per_day
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.exercise_per_day is not null and evaluations.exercise_per_day <> ''
        group by evaluations.exercise_per_day
      ) z on z.exercise_per_day = x.exercise_per_day
    where y.exercise_per_day is not null and y.exercise_per_day <> '' or z.exercise_per_day is not null and z.exercise_per_day <> ''
    group by `Exercise Per Day`

  created_by_master: true
  friendly_url_key: Exercise Per Day (Completed Participants)
- !ruby/object:Report 
  id: 61
  report_type: SQL
  name: Achieving a Healthy Lifestyle (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.perception,y.perception) `Achieving a Healthy Lifestyle`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.perception
      from evaluations e
      where e.perception is not null and e.perception <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.perception
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.perception is not null and evaluations.perception <> ''
      group by evaluations.perception
    ) y on y.perception = x.perception
    LEFT join
      (
        select count(evaluations.id) count, evaluations.perception
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.perception is not null and evaluations.perception <> ''
        group by evaluations.perception
      ) z on z.perception = x.perception
      where y.perception is not null and y.perception <> '' or z.perception is not null and z.perception <> ''
    group by `Achieving a Healthy Lifestyle`

  created_by_master: true
  friendly_url_key: Achieving a Healthy Lifestyle (Completed Participants)
# - !ruby/object:Report 
#   id: 63
#   report_type: Simple
#   name: Days Active Per Week at Registration
#   fields: 
#   - 128|1
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Days Active Per Week at Registration
# - !ruby/object:Report 
#   id: 64
#   report_type: Simple
#   name: Days Active Per Week at Evaluation
#   fields: 
#   - 128|2
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Days Active Per Week at Evaluation
# - !ruby/object:Report 
#   id: 96
#   report_type: Simple
#   name: Energy Level at Registration
#   fields: 
#   - 139|1
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Energy Level at Registration
# - !ruby/object:Report 
#   id: 97
#   report_type: Simple
#   name: Energy Level at Evaluation
#   fields: 
#   - 139|2
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Energy Level at Evaluation
- !ruby/object:Report 
  id: 98
  report_type: SQL
  name: Overall Health (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.overall_health,y.overall_health) `Overall Health`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.overall_health
      from evaluations e
      where e.overall_health is not null and e.overall_health <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.overall_health
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.overall_health is not null and evaluations.overall_health <> ''
      group by evaluations.overall_health
    ) y on y.overall_health = x.overall_health
    LEFT join
      (
        select count(evaluations.id) count, evaluations.overall_health
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.overall_health is not null and evaluations.overall_health <> ''
        group by evaluations.overall_health
      ) z on z.overall_health = x.overall_health
      where y.overall_health is not null and y.overall_health <> '' or z.overall_health is not null and z.overall_health <> ''
    group by `Overall Health`

  created_by_master: true
  friendly_url_key: Overall Health (Completed Participants)
- !ruby/object:Report 
  id: 97
  report_type: SQL
  name: Energy Level (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.energy,y.energy) `Energy`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.energy
      from evaluations e
      where e.energy is not null and e.energy <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.energy
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.energy is not null and evaluations.energy <> ''
      group by evaluations.energy
    ) y on y.energy = x.energy
    LEFT join
      (
        select count(evaluations.id) count, evaluations.energy
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.energy is not null and evaluations.energy <> ''
        group by evaluations.energy
      ) z on z.energy = x.energy
      where y.energy is not null and y.energy <> '' or z.energy is not null and z.energy <> ''
    group by `Energy`

  created_by_master: true
  friendly_url_key: Energy Level (Completed Participants)

- !ruby/object:Report 
  id: 67
  report_type: SQL
  name: Fruit Vegetable Servings (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.fruit_vegetable_servings,y.fruit_vegetable_servings) `Fruit Vegetable Servings`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.fruit_vegetable_servings
      from evaluations e
      where e.fruit_vegetable_servings is not null
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.fruit_vegetable_servings
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.fruit_vegetable_servings is not null
      group by evaluations.fruit_vegetable_servings
    ) y on y.fruit_vegetable_servings = x.fruit_vegetable_servings
    LEFT join
      (
        select count(evaluations.id) count, evaluations.fruit_vegetable_servings
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.fruit_vegetable_servings is not null
        group by evaluations.fruit_vegetable_servings
      ) z on z.fruit_vegetable_servings = x.fruit_vegetable_servings
      where y.fruit_vegetable_servings is not null or z.fruit_vegetable_servings is not null
    group by `Fruit Vegetable Servings`

  created_by_master: true
  friendly_url_key: Fruit Vegetable Servings (Completed Participants)
- !ruby/object:Report 
  id: 99
  report_type: SQL
  name: Hours of Sleep (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.sleep_hours,y.sleep_hours) `Hours of Sleep`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.sleep_hours
      from evaluations e
      where e.sleep_hours is not null and e.sleep_hours <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.sleep_hours
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.sleep_hours is not null and evaluations.sleep_hours <> ''
      group by evaluations.sleep_hours
    ) y on y.sleep_hours = x.sleep_hours
    LEFT join
      (
        select count(evaluations.id) count, evaluations.sleep_hours
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.sleep_hours is not null and evaluations.sleep_hours <> ''
        group by evaluations.sleep_hours
      ) z on z.sleep_hours = x.sleep_hours
      where y.sleep_hours is not null and y.sleep_hours <> '' or z.sleep_hours is not null and z.sleep_hours <> ''
    group by `Hours of Sleep`

  created_by_master: true
  friendly_url_key: Energy Level (Completed Participants)

- !ruby/object:Report 
  id: 101
  report_type: SQL
  name: Meaningful Connection (Completed Participants)
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    select coalesce(z.social,y.social) `Meaningful Connection`, coalesce(y.count,0) `At Registration`, coalesce(z.count,0) `At Evaluation` from
    (
      select e.social
      from evaluations e
      where e.social is not null and e.social <> ''
    ) x
    LEFT join
    (
      select count(evaluations.id) count, evaluations.social
      from evaluations
      inner join users on users.id = evaluations.user_id
      inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id and pev.days_from_start = 0
      inner join evaluation_definitions pev2 on pev2.eval_definitionable_id = users.promotion_id and pev2.days_from_start != 0
      inner join evaluations ev2 on ev2.evaluation_definition_id = pev2.id and ev2.user_id = users.id
      where users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.social is not null and evaluations.social <> ''
      group by evaluations.social
    ) y on y.social = x.social
    LEFT join
      (
        select count(evaluations.id) count, evaluations.social
        from evaluations
        inner join users on users.id = evaluations.user_id
        inner join evaluation_definitions pev on pev.eval_definitionable_id = users.promotion_id and evaluations.evaluation_definition_id = pev.id
        where pev.days_from_start != 0 AND users.promotion_id = :promotion_id and :hash_conditions_with_and_unless_empty evaluations.created_at is not null and evaluations.social is not null and evaluations.social <> ''
        group by evaluations.social
      ) z on z.social = x.social
      where y.social is not null and y.social <> '' or z.social is not null and z.social <> ''
    group by `Meaningful Connection`

  created_by_master: true
  friendly_url_key: Meaningful Connection (Completed Participants)
# - !ruby/object:Report 
#   id: 99
#   report_type: Simple
#   name: Overall Health at Registration
#   fields: 
#   - 140|1
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Overall Health at Registration
# - !ruby/object:Report 
#   id: 100
#   report_type: Simple
#   name: Overall Health at Evaluation
#   fields: 
#   - 140|2
#   - "8"
#   filters: 
#     :hashes: []

#   limit: 
#   sql: 
#   created_by_master: true
#   friendly_url_key: Overall Health at Evaluation
- !ruby/object:Report 
  id: 104
  report_type: 
  name: Participation By Gender
  fields: 
  - "7"
  - "19"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Participation By Gender
- !ruby/object:Report 
  id: 105
  report_type: 
  name: Participants Per Day
  fields: 
  - "2"
  - "19"
  filters: 
    :hashes: []

  limit: 
  sql: 
  created_by_master: false
  friendly_url_key: Participants Per Day
- !ruby/object:Report
  id: 62
  report_type: SQL
  name: Active Bus Tour Participants
  fields: []

  filters: 
    :hashes: []

  limit: 
  sql: |
    SELECT bt.departs_on AS 'Departure', COUNT(ub.id) AS 'Traveler Count' FROM bus_tours bt
    LEFT JOIN buses b ON bt.id = b.bus_tour_id
    LEFT JOIN rel_users_buses ub ON b.id = ub.bus_id
    WHERE bus_tourable_id = :promotion_id AND bus_tourable_type = 'Promotion' GROUP BY bt.id

  created_by_master: false
  friendly_url_key: Active Bus Tour Participants