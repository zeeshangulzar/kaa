--- 
- !ruby/object:ReportSetup 
  id: 1
  fields:
    "1": 
      :aggregate: false
      :sequence: 24
      :sql_phrase: profiles.first_name `First Name`, profiles.last_name `Last Name`, users.email `Email`
      :filterable: false
      :role: Coordinator
      :display_name: Each Participant
      :join: profiles
      :identification: true
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "2": 
      :aggregate: false
      :sequence: 29
      :sql_phrase: profiles.first_name `First Name`
      :filterable: false
      :role: Coordinator
      :display_name: First Name
      :join: profiles
      :identification: true
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "3": 
      :aggregate: false
      :sequence: 32
      :sql_phrase: profiles.last_name `Last Name`
      :filterable: false
      :role: Coordinator
      :display_name: Last Name
      :join: profiles
      :identification: true
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "4": 
      :aggregate: false
      :sequence: 1
      :sql_phrase: users.email `Email`
      :filterable: false
      :role: Coordinator
      :display_name: Email
      :join: users
      :identification: true
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "5": 
      :aggregate: false
      :sequence: 4
      :sql_phrase: COALESCE(IF(demographics.gender<>'',demographics.gender,NULL), 'Unspecified') `Gender`
      :filterable: true
      :role: Coordinator
      :display_name: Gender
      :join: gender_demographics
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "6": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: SUM(COALESCE(entries.exercise_steps, 0)) `Total Steps`
      :filterable: true
      :role: Coordinator
      :display_name: Total Steps
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "steps_times_recorded":
      :aggregate: true
      :sequence: 17
      :sql_phrase: "coalesce(sum(if((entries.exercise_steps > 0),1,0)),0) `Steps - Times Recorded`"
      :filterable: true
      :role: Coordinator
      :display_name: Steps - Times Recorded
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "7": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: SUM(COALESCE(entries.exercise_minutes, 0)) `Total Minutes`
      :filterable: true
      :role: Coordinator
      :display_name: Total Minutes
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "minutes_times_recorded": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: "coalesce(sum(if((entries.exercise_minutes > 0),1,0)),0) `Minutes - Times Recorded`"
      :filterable: true
      :role: Coordinator
      :display_name: Minutes - Times Recorded
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "9": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: COALESCE(SUM(entries.exercise_points), 0) `Exercise Inches`
      :filterable: true
      :role: Coordinator
      :display_name: Exercise Inches
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "gift_inches": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: COALESCE(SUM(entries.gift_points), 0) `Gift Box Inches`
      :filterable: true
      :role: Coordinator
      :display_name: Gift Box Inches
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "gift_times_recorded":
      :aggregate: true
      :sequence: 17
      :sql_phrase: "coalesce(sum(if((entries.gift_points > 0),1,0)),0) `Gift Box - Times Recorded`"
      :filterable: true
      :role: Coordinator
      :display_name: Gift Box - Times Recorded
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "behavior_inches": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: COALESCE(SUM(entries.behavior_points), 0) `Healthy Eating Inches`
      :filterable: true
      :role: Coordinator
      :display_name: Healthly Eating Inches
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "10": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: IF(SUM(COALESCE(exercise_minutes, 0) + COALESCE(exercise_steps, 0) + COALESCE(exercise_points, 0) + COALESCE(challenge_points, 0) + COALESCE(timed_behavior_points, 0)) > 0, 'Yes', 'No') AS `Is Active`
      :filterable: true
      :role: Coordinator
      :display_name: Is Active?
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "17": 
      :aggregate: false
      :sequence: 17
      :sql_phrase: DATE_FORMAT(users.created_at, '%c/%d/%Y') `Registered On`
      :filterable: true
      :role: Coordinator
      :display_name: Registered On
      :join: users
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "18": 
      :aggregate: true
      :sequence: 28
      :sql_phrase: COUNT(entries.id) `Days Logged`
      :filterable: true
      :role: Coordinator
      :display_name: Days Logged
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "19": 
      :aggregate: false
      :sequence: 33
      :sql_phrase: organizations.name `Organization`
      :filterable: true
      :role: Reseller
      :display_name: Organization
      :join: organizations
      :identification: false
      :sensitive: false
      :category: Program Fields
      :visible: true
    "20": 
      :aggregate: false
      :sequence: 8
      :sql_phrase: DATE_FORMAT(profiles.started_on, '%c/%d/%Y') `Started On`
      :filterable: true
      :role: Coordinator
      :display_name: Started On
      :join: profiles
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "21": 
      :aggregate: false
      :sequence: 8
      :sql_phrase: users.last_login `Last Login`
      :filterable: true
      :role: Coordinator
      :display_name: Last Login
      :join: users
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "22": 
      :aggregate: true
      :sequence: 8
      :sql_phrase: COALESCE(AVG(entries.exercise_steps), 0) `Average Steps` 
      :filterable: true
      :role: Coordinator
      :display_name: Average Steps
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "25|1": 
      :aggregate: false
      :sequence: 2
      :sql_phrase: locations1.name `Location`
      :filterable: true
      :role: Coordinator
      :display_name: Location
      :join: locations1
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "25|2": 
      :aggregate: false
      :sequence: 2
      :sql_phrase: locations2.name `Top Level Location`
      :filterable: true
      :role: Coordinator
      :display_name: Top Level Location
      :join: locations2
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "26": 
      :aggregate: false
      :sequence: 5
      :sql_phrase: profiles.line1 `Address`
      :filterable: false
      :role: Coordinator
      :display_name: Address
      :join: profiles
      :identification: true
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "27": 
      :aggregate: false
      :sequence: 7
      :sql_phrase: profiles.line2 `Address Line 2`
      :filterable: false
      :role: Coordinator
      :display_name: Address Line 2
      :join: profiles
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "28": 
      :aggregate: false
      :sequence: 12
      :sql_phrase: profiles.city `City`
      :filterable: false
      :role: Coordinator
      :display_name: City
      :join: profiles
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "29": 
      :aggregate: false
      :sequence: 15
      :sql_phrase: profiles.state_province `State/Province`
      :filterable: false
      :role: Coordinator
      :display_name: State/Province
      :join: profiles
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "30": 
      :aggregate: false
      :sequence: 20
      :sql_phrase: profiles.postal_code `Postal Code`
      :filterable: false
      :role: Coordinator
      :display_name: Postal Code
      :join: profiles
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "31": 
      :aggregate: true
      :sequence: 6
      :sql_phrase: COALESCE(count(distinct users.id), 0) `Count Each Participant`
      :filterable: false
      :role: Coordinator
      :display_name: Count Each Participant
      :join: users
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "32": 
      :aggregate: false
      :sequence: 10
      :sql_phrase: resellers.name `Reseller`
      :filterable: true
      :role: Master
      :display_name: Reseller
      :join: resellers
      :identification: false
      :sensitive: false
      :category: Program Fields
      :visible: true
    "33": 
      :aggregate: false
      :sequence: 14
      :sql_phrase: if(users.allows_email=1,'Yes','No') `Allows Email`
      :filterable: true
      :role: Coordinator
      :display_name: Allows Email
      :join: users
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "34": 
      :aggregate: true
      :sequence: 8
      :sql_phrase: AVG(entries.exercise_minutes) `Average Minutes`
      :filterable: true
      :role: Coordinator
      :display_name: Average Minutes
      :join: entries
      :identification: false
      :sensitive: false
      :category: Activity Fields
      :visible: true
    "35": 
      :aggregate: false
      :sequence: 50
      :sql_phrase: evaluations.find_out `Find Out`
      :filterable: true
      :role: Coordinator
      :display_name: Find Out
      :join: evaluations
      :identification: false
      :sensitive: false
      :category: Evaluation N Fields
      :visible: true
    "36": 
      :aggregate: false
      :sequence: 50
      :sql_phrase: evaluations.average_days_active_per_week `Average Days Active Per Week`
      :filterable: true
      :role: Coordinator
      :display_name: Average Days Active Per Week
      :join: evaluations
      :identification: false
      :sensitive: false
      :category: Evaluation N Fields
      :visible: true
    "37": 
      :aggregate: false
      :sequence: 50
      :sql_phrase: evaluations.average_minutes_per_day `Average Minutes Per Day`
      :filterable: true
      :role: Coordinator
      :display_name: Average Minutes Per Day
      :join: evaluations
      :identification: false
      :sensitive: false
      :category: Evaluation N Fields
      :visible: true
    "38": 
      :aggregate: false
      :sequence: 9
      :sql_phrase: teams.name `Team Name`
      :filterable: true
      :role: Coordinator
      :display_name: Team Name
      :join: competitions
      :identification: false
      :sensitive: false
      :category: Competition N Fields
      :visible: true
    "39": 
      :aggregate: false
      :sequence: 9
      :sql_phrase: teams.motto `Team Motto`
      :filterable: true
      :role: Coordinator
      :display_name: Team Motto
      :join: competitions
      :identification: false
      :sensitive: false
      :category: Competition N Fields
      :visible: true
    "40": 
      :aggregate: false
      :sequence: 9
      :sql_phrase: case when teams.status = 1 then 'Yes' else 'No' end `Team Is Official`
      :filterable: true
      :role: Coordinator
      :display_name: Team Is Official
      :join: competitions
      :identification: false
      :sensitive: false
      :category: Competition N Fields
      :visible: true
    "41": 
      :aggregate: true
      :sequence: 17
      :sql_phrase: COALESCE((SUM(entries.exercise_points) + SUM(entries.gift_points) + SUM(entries.behavior_points)), 0) `Total Inches`
      :filterable: true
      :role: Coordinator
      :display_name: Total Inches
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "46": 
      :aggregate: false
      :sequence: 4
      :sql_phrase: IF(users.active_device = 'FITBIT', 'Yes', 'No') `Is Connected To Fitbit?`
      :filterable: true
      :role: Coordinator
      :display_name: Is Connected To Fitbit?
      :join: users
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: false
    "57": 
      :aggregate: false
      :sequence: 29
      :sql_phrase: leader_profiles.first_name `Team Leader First Name`, leader_profiles.last_name `Team Leader Last Name`, leader_users.email `Team Leader Email`
      :filterable: false
      :role: Coordinator
      :display_name: Team Leader
      :join: competitions
      :identification: true
      :sensitive: false
      :category: Competition Fields
      :visible: true
    "59": 
      :aggregate: false
      :sequence: 29
      :sql_phrase: leader_locations.name `Team Location`
      :filterable: false
      :role: Coordinator
      :display_name: Team Location
      :join: competitions
      :identification: true
      :sensitive: false
      :category: Competition Fields
      :visible: false
    "61": 
      :aggregate: false
      :sequence: 50
      :sql_phrase: evaluations.focus `Focus`
      :filterable: true
      :role: Coordinator
      :display_name: Focus
      :join: evaluations
      :identification: false
      :sensitive: false
      :category: Evaluation N Fields
      :visible: true
    "73": 
      :aggregate: true
      :sequence: 73
      :sql_phrase: COALESCE(team_score.score, 0) `Team Score`
      :filterable: true
      :role: Coordinator
      :display_name: Team Score
      :join: competitions
      :identification: false
      :sensitive: false
      :category: Competition N Fields
      :visible: true
    "74": 
      :aggregate: false
      :sequence: 74
      :sql_phrase: IF(teams.id IS NULL, "No", "Yes") `Is On Team`
      :filterable: true
      :role: Coordinator
      :display_name: Is On Team
      :join: competitions
      :identification: false
      :sensitive: false
      :category: Competition N Fields
      :visible: true
    "75": 
      :aggregate: true
      :sequence: 75
      :sql_phrase: IF(COUNT(entries.id) > 0, "Yes", "No") `Logged Today?`
      :filterable: true
      :role: Coordinator
      :display_name: Logged Today?
      :join: entries
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "76": 
      :aggregate: true
      :sequence: 76
      :sql_phrase: COUNT(DISTINCT wall_posts.id) `Wall Posts`
      :filterable: true
      :role: Coordinator
      :display_name: Wall Posts
      :join: wall_posts
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "77": 
      :aggregate: true
      :sequence: 77
      :sql_phrase: COUNT(DISTINCT recipe_ratings.id) `Recipe Ratings`
      :filterable: true
      :role: Coordinator
      :display_name: Recipe Ratings
      :join: recipe_ratings
      :identification: false
      :sensitive: false
      :category: Participant Fields
      :visible: true
    "78":
      :identification: true
      :visible: false
      :display_name: SSO Identifier
      :aggregate: false
      :join: users
      :sequence: 16
      :filterable: true
      :sql_phrase: users.sso_identifier `SSO Identifier`
      :role: Coordinator
      :sensitive: false
      :category: Participant Fields
  joins: 
    "100": 
      :nest_level: 1
      :sql: left join eligibilities on (eligibilities.user_id = users.id)
      :alias: eligibilities
      :childof: users
    "101": 
      :nest_level: 0
      :sql: 
      :alias: users
    "102": 
      :nest_level: 2
      :sql: left join entries on (entries.user_id = users.id AND `entries`.`recorded_on` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: entries
      :childof: users
    "103": 
      :nest_level: 2
      :sql: LEFT JOIN `challenges_sent` ON (`challenges_sent`.`user_id` = `users`.`id` AND `challenges_sent`.`created_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: challenges_sent
      :childof: users
    "104": 
      :nest_level: 2
      :sql: LEFT JOIN `challenges_received` on (`challenges_received`.`user_id` = `users`.`id` AND `challenges_received`.`created_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: challenges_received
      :childof: users
    "105": 
      :nest_level: 2
      :sql: inner join user_badges on (user_badges.user_id = users.id)
      :alias: badges
      :childof: users
    "106|1": 
      :nest_level: 1
      :sql: left join locations locations1 on (users.location_id = locations1.id)
      :alias: locations1
      :childof: promotions
    "106|2": 
      :nest_level: 1
      :sql: left join locations locations2 on (users.top_level_location_id = locations2.id)
      :alias: locations2
      :childof: promotions
    "107": 
      :nest_level: 1
      :sql: |
        INNER JOIN profiles p ON p.user_id = users.id
        LEFT JOIN locations r ON r.id = users.top_level_location_id
        LEFT JOIN locations l ON l.id = users.location_id
        LEFT JOIN team_members ON team_members.user_id = users.id
        LEFT JOIN teams ON (team_members.team_id = teams.id AND teams.status < 2)
        LEFT JOIN team_members leader_team_members ON (leader_team_members.team_id = teams.id AND leader_team_members.is_leader = 1)
        LEFT JOIN users leader_users ON (leader_users.id = leader_team_members.user_id)
        LEFT JOIN locations leader_locations ON leader_locations.id = leader_users.location_id
        LEFT JOIN profiles leader_profiles ON leader_profiles.user_id = leader_users.id
        LEFT JOIN (
          SELECT team_id,
          SUM(COALESCE(team_members.total_points, 0))/COUNT(team_members.id) `score`
          FROM team_members
          JOIN competitions on competitions.id = team_members.competition_id
          WHERE competitions.promotion_id = :promotion_id
        GROUP BY team_id) team_score on team_score.team_id = team_members.team_id

      :alias: competitions
      :childof: users
    "108": 
      :nest_level: -2
      :sql: inner join organizations on (organizations.id = promotions.organization_id)
      :alias: organizations
      :parentof: promotions
    "109": 
      :nest_level: -3
      :sql: inner join resellers on (resellers.id = organizations.reseller_id)
      :alias: resellers
      :parentof: organizations
    "110": 
      :nest_level: -1
      :sql: inner join promotions on (promotions.id = users.promotion_id)
      :alias: promotions
      :parentof: users
    "111":
      :nest_level: 1
      :sql: |
        inner join evaluation_definitions evaluationNDefinition on (evaluationNDefinition.id = evaluationN)
        inner join evaluations evaluationsN on (users.id = evaluationsN.user_id and evaluationNDefinition.id = evaluationsN.evaluation_definition_id)
      :alias: evaluations
      :childof: users
    "112": 
      :alias: evaluationsN_udfs
      :nest_level: 3
      :childof: evaluations
      :sql: left join evaluation_udfs evaluationsN_udfs on (evaluationsN_udfs.evaluation_id = evaluationsN.id)
    "113":
      :nest_level: 1
      :sql: join profiles on (profiles.user_id = users.id)
      :alias: profiles
      :childof: users
    "114":
      :nest_level: 1
      :sql: left join demographics on (demographics.user_id = users.id AND demographics.age IS NOT NULL AND demographics.age != '')
      :alias: age_demographics
      :childof: users
    "gender_demographics":
      :nest_level: 1
      :sql: left join demographics on (demographics.user_id = users.id AND demographics.gender IS NOT NULL AND demographics.gender != '')
      :alias: gender_demographics
      :childof: users
    "115": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Orange')
      :alias: orange_milestones
      :childof: users
    "116": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Green')
      :alias: green_milestones
      :childof: users
    "117": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Bronze')
      :alias: bronze_milestones
      :childof: users
    "118": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Silver')
      :alias: silver_milestones
      :childof: users
    "119": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Gold')
      :alias: gold_milestones
      :childof: users
    "120": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Platinum')
      :alias: platinum_milestones
      :childof: users
    "121": 
      :nest_level: 1
      :sql: |
        INNER JOIN user_badges user_milestones ON user_milestones.user_id = users.id
        INNER JOIN badges milestones ON (milestones.id = user_milestones.badge_id AND milestones.name = 'Diamond')
      :alias: diamond_milestones
      :childof: users
    "122": 
      :nest_level: 1
      :sql: |
        INNER JOIN friendships ON (friendships.friendee_id = users.id AND friendships.status = 'A')
      :alias: friendships
      :childof: users
    "123":
      :nest_level: 1
      :sql: left join demographics on (demographics.user_id = users.id AND demographics.ethnicity IS NOT NULL AND demographics.ethnicity != '')
      :alias: ethnicity_demographics
      :childof: users
    "300":
      :nest_level: 1
      :sql: INNER JOIN `challenges` AS `regional_challenges_created` on (`regional_challenges_created`.`created_by` = `users`.`id` AND `regional_challenges_created`.`type` = 'regional')
      :alias: regional_challenges_created
      :childof: users
    "301":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_accepted`.`id`) AS `rc_accepted`, `challenges_accepted`.`user_id` FROM `challenges_received` AS `challenges_accepted` INNER JOIN `challenges` AS `regional_challenges_accepted` ON (`regional_challenges_accepted`.`type` = 'regional' AND `challenges_accepted`.`challenge_id` = `regional_challenges_accepted`.`id`) WHERE`challenges_accepted`.`status` IN (2, 3) AND `challenges_accepted`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_accepted`.`user_id`) AS `regional_challenges_accepted` ON `regional_challenges_accepted`.`user_id` = `users`.`id`
      :alias: regional_challenges_accepted
      :childof: users
    "302": 
      :nest_level: 1
      :sql: LEFT JOIN `challenges_received` AS `challenges_accepted` ON (`challenges_accepted`.`user_id` = `users`.`id` AND `challenges_accepted`.`status` IN (2, 3) AND `challenges_accepted`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: challenges_accepted
      :childof: users
    "303":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_completed`.`id`) AS `rc_completed`, `challenges_completed`.`user_id` FROM `challenges_received` AS `challenges_completed` INNER JOIN `challenges` AS `regional_challenges_completed` ON (`regional_challenges_completed`.`type` = 'regional' AND `challenges_completed`.`challenge_id` = `regional_challenges_completed`.`id`) WHERE`challenges_completed`.`status` = 3 AND `challenges_completed`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_completed`.`user_id`) AS `regional_challenges_completed` ON `regional_challenges_completed`.`user_id` = `users`.`id`
      :alias: regional_challenges_completed
      :childof: users
    "304": 
      :nest_level: 1
      :sql: INNER JOIN `challenges_received` AS `challenges_completed` ON (`challenges_completed`.`user_id` = `users`.`id` AND `challenges_completed`.`status` = 3 AND `challenges_completed`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: challenges_completed
      :childof: users
    "305": 
      :nest_level: 1
      :sql: LEFT JOIN `challenges_received` AS `challenges_declined` ON (`challenges_declined`.`user_id` = `users`.`id` AND `challenges_declined`.`status` = 4 AND `challenges_declined`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: challenges_declined
      :childof: users
    "306":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_declined`.`id`) AS `rc_declined`, `challenges_declined`.`user_id` FROM `challenges_received` AS `challenges_declined` INNER JOIN `challenges` AS `regional_challenges_declined` ON (`regional_challenges_declined`.`type` = 'regional' AND `challenges_declined`.`challenge_id` = `regional_challenges_declined`.`id`) WHERE`challenges_declined`.`status` = 4 AND `challenges_declined`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_declined`.`user_id`) AS `regional_challenges_declined` ON `regional_challenges_declined`.`user_id` = `users`.`id`
      :alias: regional_challenges_declined
      :childof: users
    "307":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_accepted`.`id`) AS `pc_accepted`, `challenges_accepted`.`user_id` FROM `challenges_received` AS `challenges_accepted` INNER JOIN `challenges` AS `peer_challenges_accepted` ON (`peer_challenges_accepted`.`type` = 'peer' AND `challenges_accepted`.`challenge_id` = `peer_challenges_accepted`.`id`) WHERE`challenges_accepted`.`status` IN (2, 3) AND `challenges_accepted`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_accepted`.`user_id`) AS `peer_challenges_accepted` ON `peer_challenges_accepted`.`user_id` = `users`.`id`
      :alias: peer_challenges_accepted
      :childof: users
    "308":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_completed`.`id`) AS `pc_completed`, `challenges_completed`.`user_id` FROM `challenges_received` AS `challenges_completed` INNER JOIN `challenges` AS `peer_challenges_completed` ON (`peer_challenges_completed`.`type` = 'peer' AND `challenges_completed`.`challenge_id` = `peer_challenges_completed`.`id`) WHERE`challenges_completed`.`status` = 3 AND `challenges_completed`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_completed`.`user_id`) AS `peer_challenges_completed` ON `peer_challenges_completed`.`user_id` = `users`.`id`
      :alias: peer_challenges_completed
      :childof: users
    "309":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_declined`.`id`) AS `pc_declined`, `challenges_declined`.`user_id` FROM `challenges_received` AS `challenges_declined` INNER JOIN `challenges` AS `peer_challenges_declined` ON (`peer_challenges_declined`.`type` = 'peer' AND `challenges_declined`.`challenge_id` = `peer_challenges_declined`.`id`) WHERE`challenges_declined`.`status` = 4 AND `challenges_declined`.`updated_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_declined`.`user_id`) AS `peer_challenges_declined` ON `peer_challenges_declined`.`user_id` = `users`.`id`
      :alias: peer_challenges_declined
      :childof: users
    "310": 
      :nest_level: 1
      :sql: |
        LEFT JOIN team_members ON team_members.user_id = users.id
        LEFT JOIN teams ON (team_members.team_id = teams.id AND teams.status < 2)
      :alias: teams
      :childof: users
    "311":
      :nest_level: 1
      :sql: LEFT JOIN (SELECT COUNT(DISTINCT `challenges_received`.`id`) AS `pc_received`, `challenges_accepted`.`user_id` FROM `challenges_received`  INNER JOIN `challenges` AS `peer_challenges_received` ON (`peer_challenges_received`.`type` = 'peer' AND `challenges_received`.`challenge_id` = `peer_challenges_received`.`id`) WHERE `challenges_received`.`created_at` BETWEEN :reported_on_min AND :reported_on_max GROUP BY `challenges_received`.`user_id`) AS `peer_challenges_received` ON `peer_challenges_received`.`user_id` = `users`.`id`
      :alias: peer_challenges_received
      :childof: users
    "312":
      :nest_level: 1
      :sql: LEFT JOIN `posts` AS `wall_posts` ON (`wall_posts`.`user_id` = `users`.`id` AND `wall_posts`.`wallable_type` = 'Promotion' AND `wall_posts`.`wallable_id` = `users`.`promotion_id` AND `wall_posts`.`is_flagged` = 0 AND `wall_posts`.`is_deleted` = 0 AND `wall_posts`.`created_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: wall_posts
      :childof: users
    "313":
      :nest_level: 1
      :sql: LEFT JOIN `ratings` AS `recipe_ratings` ON (`recipe_ratings`.`user_id` = `users`.`id` AND `recipe_ratings`.`rateable_type` = 'Recipe' AND `recipe_ratings`.`created_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: recipe_ratings
      :childof: users
    "314":
      :nest_level: 1
      :sql: LEFT JOIN `success_stories` ON (`success_stories`.`user_id` = `users`.`id` AND `success_stories`.`created_at` BETWEEN :reported_on_min AND :reported_on_max)
      :alias: success_stories
      :childof: users
    "16":
      :alias: entry_behaviors
      :nest_level: 3
      :childof: entries
      :sql: |
        left join entry_behaviors on (entry_behaviors.entry_id = entries.id)
        left join behaviors on (behaviors.id = entry_behaviors.behavior_id)

